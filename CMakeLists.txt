cmake_minimum_required(VERSION 3.1)
project(QCSimulatorRoot)
find_package(CUDA REQUIRED)
find_package(OpenMP REQUIRED)
# find_package(MPI REQUIRED)
# include_directories(${MPI_INCLUDE_PATH})
find_library(CUTT cutt "${PROJECT_SOURCE_DIR}/third-party/cutt/cutt/lib")
include_directories(${PROJECT_SOURCE_DIR}/third-party/cutt/cutt/include)
include_directories(${PROJECT_SOURCE_DIR}/third-party/dbg-macro)
MESSAGE(STATUS "Found CUTT: ${CUTT}")

set(CMAKE_CXX_FLAGS "-std=c++14 -O2 -g -Wall ${OpenMP_CXX_FLAGS}")
set(CUDA_NVCC_FLAGS "-Xcompiler -fopenmp -std=c++14 -O2 -g -arch=compute_80 -code=sm_80 --ptxas-options=-v -lineinfo -keep")
set(BACKEND "group" CACHE STRING "Backend mode, one of [serial, group, group-serial, blas]")
MESSAGE(STATUS "Backend: ${BACKEND}")

option(SHOW_SCHEDULE "Print the schedule" ON)
option(SHOW_SUMMARY "Show the running details" ON)
option(MEASURE_STAGE "Measure time of each stage" OFF)
option(MICRO_BENCH "Compile micro-benchmarks" OFF)
option(EVALUATOR_PREPROCESS "compile evaluator preprocess" OFF)
option(DISABLE_ASSERT "Use assert in cuda runtime" ON)
option(USE_DOUBLE "double or float" ON)

if (BACKEND STREQUAL "serial")
    add_definitions(-DBACKEND=0)
elseif(BACKEND STREQUAL "group")
    add_definitions(-DBACKEND=1)
elseif(BACKEND STREQUAL "group-serail")
    add_definitions(-DBACKEND=2)
elseif(BACKEND STREQUAL "blas")
    add_definitions(-DBACKEND=3)
elseif(BACKEND STREQUAL "mix")
    add_definitions(-DBACKEND=4)
else()
    MESSAGE(ERROR "invalid mode")
endif()

if (SHOW_SCHEDULE)
    add_definitions(-DSHOW_SCHEDULE)
endif(SHOW_SCHEDULE)
if (SHOW_SUMMARY)
    add_definitions(-DSHOW_SUMMARY)
endif(SHOW_SUMMARY)
if (MEASURE_STAGE)
    add_definitions(-DMEASURE_STAGE)
endif(MEASURE_STAGE)
if (DISABLE_ASSERT)
    add_definitions(-DNDEBUG)
endif(DISABLE_ASSERT)
if (USE_DOUBLE)
    MESSAGE(STATUS "Float type: Double")
    add_definitions(-DUSE_DOUBLE)
else()
    MESSAGE(STATUS "Float type: Float")
endif(USE_DOUBLE)


set(COALESCE "3" CACHE STRING "coalescing size")
MESSAGE(STATUS "coalesce = ${COALESCE}")
add_definitions(-DCOALESCE_GLOBAL_DEFINED=${COALESCE})

set(MAT "6" CACHE STRING "mat size")
MESSAGE(STATUS "mat size = ${MAT}")
add_definitions(-DBLAS_MAT_LIMIT_DEFINED=${MAT})

set(MIN_MAT "4" CACHE STRING "min mat size")
MESSAGE(STATUS "min mat size = ${MIN_MAT}")
add_definitions(-DMIN_MAT_SIZE_DEFINED=${MIN_MAT})

set(THREAD_DEP "7" CACHE STRING "thread dep")
MESSAGE(STATUS "thread_dep = ${THREAD_DEP}")
add_definitions(-DTHREAD_DEP_DEFINED=${THREAD_DEP})

if (EVALUATOR_PREPROCESS)
    set(PROCESS process)
    add_executable(process evaluator-preprocess/process.cpp)
    target_link_libraries(process QCSimulator ${CUTT} ${OpenMP_CXX_FLAGS} ${CUDA_CUBLAS_LIBRARIES})
    add_definitions(-DUSE_EVALUATOR_PREPROCESS)
endif(EVALUATOR_PREPROCESS)

include_directories ("${PROJECT_SOURCE_DIR}/src")
add_subdirectory("src")
add_executable(main main.cpp)
target_link_libraries(main QCSimulator ${CUTT} ${OpenMP_CXX_FLAGS} ${CUDA_CUBLAS_LIBRARIES})

if (MICRO_BENCH)
    set(BENCHMARKS local-single local-ctr two-group-h)
    foreach(BENCHMARK IN LISTS BENCHMARKS)
        add_executable(${BENCHMARK} micro-benchmark/${BENCHMARK}.cpp)
        target_link_libraries(${BENCHMARK} QCSimulator ${CUTT} ${OpenMP_CXX_FLAGS} ${CUDA_CUBLAS_LIBRARIES})
    endforeach(BENCHMARK IN LISTS BENCHMARKS)
endif(MICRO_BENCH)
