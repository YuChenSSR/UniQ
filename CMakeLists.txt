cmake_minimum_required(VERSION 3.1)
project(QCSimulatorRoot)
find_package(CUDA REQUIRED)
find_package(MPI REQUIRED)
include_directories(${MPI_INCLUDE_PATH})
find_library(CUTT cutt "${PROJECT_SOURCE_DIR}/third-party/cutt/cutt/lib")
include_directories(${PROJECT_SOURCE_DIR}/third-party/cutt/cutt/include)
MESSAGE(STATUS "Found CUTT: ${CUTT}")

set(CMAKE_CXX_FLAGS "-std=c++14 -O2 -g -Wall")
set(CUDA_NVCC_FLAGS "-std=c++14 -O2 -g -arch=compute_70 -code=sm_70 --ptxas-options=-v -lineinfo -keep")

option(USE_GROUP "Grouping the gates before execution" ON)
option(SHOW_SCHEDULE "Print the schedule" ON)
option(SHOW_SUMMARY "Show the running details" ON)
option(MEASURE_STAGE "Measure time of each stage" OFF)
option(MICRO_BENCH "Compile micro-benchmarks" OFF)
option(DISABLE_ASSERT "Use assert in cuda runtime" ON)

if (USE_GROUP)
    add_definitions(-DUSE_GROUP)
endif(USE_GROUP)
if (SHOW_SCHEDULE)
    add_definitions(-DSHOW_SCHEDULE)
endif(SHOW_SCHEDULE)
if (SHOW_SUMMARY)
    add_definitions(-DSHOW_SUMMARY)
endif(SHOW_SUMMARY)
if (MEASURE_STAGE)
    add_definitions(-DMEASURE_STAGE)
endif(MEASURE_STAGE)
if (DISABLE_ASSERT)
    add_definitions(-DNDEBUG)
endif(DISABLE_ASSERT)

include_directories ("${PROJECT_SOURCE_DIR}/src")
add_subdirectory("src")
add_executable(main main.cpp)
target_link_libraries(main QCSimulator ${CUTT} ${MPI_CXX_LIBRARIES})

if (MICRO_BENCH)
    set(BENCHMARKS local-single local-ctr)
    foreach(BENCHMARK IN LISTS BENCHMARKS)
        add_executable(${BENCHMARK} micro-benchmark/${BENCHMARK}.cpp)
        target_link_libraries(${BENCHMARK} QCSimulator ${CUTT} ${MPI_CXX_LIBRARIES})
    endforeach(BENCHMARK IN LISTS BENCHMARKS)
endif(MICRO_BENCH)
